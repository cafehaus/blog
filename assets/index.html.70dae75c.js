import{h as n}from"./app.c91e4ae6.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},p=n(`<h1 id="\u624B\u5199json-parse\u548Cjson-stringify" tabindex="-1"><a class="header-anchor" href="#\u624B\u5199json-parse\u548Cjson-stringify" aria-hidden="true">#</a> \u624B\u5199JSON.parse\u548CJSON.stringify</h1><p>\u641E\u61C2\u4E86\u6709\u9650\u72B6\u6001\u673A\uFF0C\u624B\u5199\u5404\u79CD\u89E3\u6790\u5668\u90FD\u4E0D\u5728\u8BDD\u4E0B\uFF0C\u4E3B\u8981\u533A\u522B\u4E5F\u5C31\u662F\u8003\u8651\u600E\u4E48\u53BB\u8BBE\u8BA1\u5404\u79CD\u72B6\u6001\u6D41\u8F6C\u3002</p><h3 id="\u624B\u5199json-parse" tabindex="-1"><a class="header-anchor" href="#\u624B\u5199json-parse" aria-hidden="true">#</a> \u624B\u5199JSON.parse</h3><p>\u6709\u4E24\u79CD\u5B9E\u73B0\u65B9\u5F0F\uFF0C\u7B2C1\u79CD\u521D\u7EA7\u7248\u6CA1\u5565\u96BE\u5EA6\uFF0C\u7B2C2\u79CD\u5229\u7528\u72B6\u6001\u673A\u81EA\u5DF1\u53BB\u89E3\u6790\u5B57\u7B26\u6D41\uFF0C\u9700\u8981\u5148\u5B66\u4E60\u4E0B\u7F16\u8BD1\u539F\u7406\u76F8\u5173\u7684\u77E5\u8BC6\uFF0C\u5426\u5219\u7406\u89E3\u8D77\u6765\u53EF\u80FD\u6709\u70B9\u8499\u3002</p><h4 id="\u521D\u7EA7\u7248\u672C-json-parse" tabindex="-1"><a class="header-anchor" href="#\u521D\u7EA7\u7248\u672C-json-parse" aria-hidden="true">#</a> \u521D\u7EA7\u7248\u672C JSON parse</h4><p>\u76F4\u63A5\u901A\u8FC7 eval \u51FD\u6570\u5B9E\u73B0\uFF0C\u4E0D\u8FC7\u6CE8\u610F\u9700\u8981\u5728 json \u5B57\u7B26\u4E32\u524D\u540E\u62FC\u4E0A\u62EC\u53F7\uFF0C\u5426\u5219\u4F1A\u5F53\u6210\u4EE3\u7801\u5757\u62A5\u9519\u89E3\u6790\u5BFC\u81F4\u62A5\u9519\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token parameter">json</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> txt <span class="token operator">=</span> <span class="token string">&#39;(&#39;</span> <span class="token operator">+</span> json <span class="token operator">+</span> <span class="token string">&#39;)&#39;</span>
  <span class="token keyword">return</span> <span class="token function">eval</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="\u9AD8\u7EA7\u7248\u672C-json-parse" tabindex="-1"><a class="header-anchor" href="#\u9AD8\u7EA7\u7248\u672C-json-parse" aria-hidden="true">#</a> \u9AD8\u7EA7\u7248\u672C JSON parse</h4><p>\u4E3B\u8981\u5229\u7528\u6709\u9650\u72B6\u6001\u673A\u6765\u505A\u5206\u8BCD\uFF0C\u7136\u540E\u518D\u6839\u636E\u62FF\u5230\u7684\u5206\u8BCD\u6570\u636E\u7EC4\u88C5\u6210 json \u5BF9\u8C61\u3002</p><p>\u5206\u8BCD\u9636\u6BB5\u4E3B\u8981\u65F6\u8BBE\u8BA1\u72B6\u6001\u6BD4\u8F83\u9EBB\u70E6\uFF0C\u521A\u5F00\u59CB\u53EF\u4EE5\u4ECE\u6BD4\u8F83\u7B80\u5355\u7684\u72B6\u6001\u5F00\u59CB\uFF0C\u7136\u540E\u518D\u4E00\u6B65\u6B65\u589E\u52A0\u96BE\u5EA6\u5B8C\u5584\u4EE3\u7801\uFF0C\u60F3\u8981\u4E00\u90E8\u5230\u4F4D\u641E\u597D\u6240\u6709\u7684\u72B6\u6001\u5F88\u5BB9\u6613\u5728\u91CC\u9762\u7ED5\u6655\u3002\u4E0B\u9762\u7684\u7248\u672C\u4E5F\u53EA\u8003\u8651\u4E86\u4E00\u4E9B\u5F88\u7B80\u5355\u7684\u573A\u666F\uFF0C\u5C24\u5176\u5D4C\u5957\u6570\u7EC4\u8FD9\u5757\u76F4\u63A5\u628A\u6570\u7EC4\u5F53\u6210\u7684\u4E00\u4E2A token\uFF0C\u4E0D\u652F\u6301\u5185\u90E8\u518D\u5D4C\u5957\u6570\u7EC4\uFF0C\u4EE5\u65B9\u4FBF\u7406\u89E3\u4E3A\u4E3B\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u5206\u8BCD</span>
<span class="token keyword">function</span> <span class="token function">jsonTokenizer</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// \u6807\u7B7E\u5F00\u59CB</span>
  <span class="token keyword">const</span> objectStartReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">{</span><span class="token regex-delimiter">/</span></span>
  <span class="token keyword">const</span> objectEndReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">}</span><span class="token regex-delimiter">/</span></span>
  <span class="token keyword">const</span> arrayStartReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\[</span><span class="token regex-delimiter">/</span></span>
  <span class="token keyword">const</span> arrayEndReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">]</span><span class="token regex-delimiter">/</span></span>
  <span class="token keyword">const</span> numberReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[0-9]</span><span class="token regex-delimiter">/</span></span>
  <span class="token keyword">const</span> booleanReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[t|f]</span><span class="token regex-delimiter">/</span></span>
  <span class="token keyword">const</span> nullReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[n]</span><span class="token regex-delimiter">/</span></span>

  <span class="token keyword">const</span> keyReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-zA-Z0-9_$]</span><span class="token regex-delimiter">/</span></span>
  <span class="token keyword">const</span> quotationReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&quot;</span><span class="token regex-delimiter">/</span></span>
  <span class="token keyword">const</span> commaReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">,</span><span class="token regex-delimiter">/</span></span>
  <span class="token keyword">const</span> colonReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">:</span><span class="token regex-delimiter">/</span></span>

	<span class="token keyword">let</span> tokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
	<span class="token keyword">let</span> currentToken <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token comment">// \u521D\u59CB\u72B6\u6001</span>
  <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>objectStartReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      currentToken <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;objectStart&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> e <span class="token punctuation">}</span>
			<span class="token keyword">return</span> onQuotation
		<span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>objectEndReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      currentToken <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;objectEnd&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> e <span class="token punctuation">}</span>
      <span class="token function">pushToken</span><span class="token punctuation">(</span>currentToken<span class="token punctuation">)</span>
			<span class="token keyword">return</span> init
		<span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arrayEndReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      currentToken <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;arrayEnd&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> e <span class="token punctuation">}</span>
      <span class="token function">pushToken</span><span class="token punctuation">(</span>currentToken<span class="token punctuation">)</span>
			<span class="token keyword">return</span> init
		<span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>commaReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      currentToken <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;comma&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> e <span class="token punctuation">}</span>
      <span class="token function">pushToken</span><span class="token punctuation">(</span>currentToken<span class="token punctuation">)</span>
      <span class="token keyword">return</span> onQuotation
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> init
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">onQuotation</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentToken<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;objectStart&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">pushToken</span><span class="token punctuation">(</span>currentToken<span class="token punctuation">)</span>
      currentToken <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span> <span class="token punctuation">}</span>
      <span class="token keyword">return</span> onKey
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentToken<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;colon&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">pushToken</span><span class="token punctuation">(</span>currentToken<span class="token punctuation">)</span>
      currentToken <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span> <span class="token punctuation">}</span>
      <span class="token keyword">return</span> onValue
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>quotationReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      currentToken <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span> <span class="token punctuation">}</span>
      <span class="token keyword">return</span> onKey
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">onKey</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>keyReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      currentToken<span class="token punctuation">.</span>value <span class="token operator">+=</span> e
      <span class="token keyword">return</span> onKey
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>quotationReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">pushToken</span><span class="token punctuation">(</span>currentToken<span class="token punctuation">)</span>
      <span class="token keyword">return</span> onColon
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">onValue</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>commaReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">pushToken</span><span class="token punctuation">(</span>currentToken<span class="token punctuation">)</span>
      currentToken <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;comma&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> e <span class="token punctuation">}</span>
      <span class="token function">pushToken</span><span class="token punctuation">(</span>currentToken<span class="token punctuation">)</span>
      <span class="token keyword">return</span> onQuotation
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>objectEndReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">pushToken</span><span class="token punctuation">(</span>currentToken<span class="token punctuation">)</span>
      currentToken <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;objectEnd&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> e <span class="token punctuation">}</span>
      <span class="token function">pushToken</span><span class="token punctuation">(</span>currentToken<span class="token punctuation">)</span>
			<span class="token keyword">return</span> init
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>objectStartReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      currentToken <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;objectStart&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> e <span class="token punctuation">}</span>
			<span class="token keyword">return</span> onQuotation
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arrayStartReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      currentToken <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;arrayStart&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> e <span class="token punctuation">}</span>
      <span class="token function">pushToken</span><span class="token punctuation">(</span>currentToken<span class="token punctuation">)</span>
      currentToken <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;valueArray&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span> <span class="token punctuation">}</span>
      <span class="token keyword">return</span> onAarry
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>numberReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      currentToken <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;valueNumber&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> e <span class="token punctuation">}</span>
      <span class="token keyword">return</span> onBasicData
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>booleanReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      currentToken <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;valueBoolean&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> e <span class="token punctuation">}</span>
      <span class="token keyword">return</span> onBasicData
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nullReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      currentToken <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;valueNull&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> e <span class="token punctuation">}</span>
      <span class="token keyword">return</span> onBasicData
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      currentToken<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;value&#39;</span>
      currentToken<span class="token punctuation">.</span>value <span class="token operator">+=</span> e
      <span class="token keyword">return</span> onValue
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">onBasicData</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>commaReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">pushToken</span><span class="token punctuation">(</span>currentToken<span class="token punctuation">)</span>
      currentToken <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;comma&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> e <span class="token punctuation">}</span>
      <span class="token function">pushToken</span><span class="token punctuation">(</span>currentToken<span class="token punctuation">)</span>
      <span class="token keyword">return</span> onQuotation
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>objectEndReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">pushToken</span><span class="token punctuation">(</span>currentToken<span class="token punctuation">)</span>
      currentToken <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;objectEnd&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> e <span class="token punctuation">}</span>
      <span class="token function">pushToken</span><span class="token punctuation">(</span>currentToken<span class="token punctuation">)</span>
			<span class="token keyword">return</span> init
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      currentToken<span class="token punctuation">.</span>value <span class="token operator">+=</span> e
      <span class="token keyword">return</span> onBasicData
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// \u6570\u7EC4\u8FD9\u513F\u6BD4\u8F83\u590D\u6742\uFF0C\u6682\u65F6\u53EA\u8003\u8651\u8FD9\u79CD\u7B80\u5355\u7684</span>
  <span class="token keyword">function</span> <span class="token function">onAarry</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arrayEndReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">pushToken</span><span class="token punctuation">(</span>currentToken<span class="token punctuation">)</span>
      currentToken <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;arrayEnd&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> e <span class="token punctuation">}</span>
      <span class="token function">pushToken</span><span class="token punctuation">(</span>currentToken<span class="token punctuation">)</span>
      <span class="token keyword">return</span> init
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      currentToken<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">(</span>currentToken<span class="token punctuation">.</span>value <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> e
      <span class="token keyword">return</span> onAarry
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">onColon</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>colonReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      currentToken <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;colon&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> e <span class="token punctuation">}</span>
      <span class="token function">pushToken</span><span class="token punctuation">(</span>currentToken<span class="token punctuation">)</span>
      currentToken <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;valueStart&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span> <span class="token punctuation">}</span>
      <span class="token keyword">return</span> onValue
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// \u6BCF\u6B21\u8BFB\u53D6\u5230\u5B8C\u6574\u7684\u4E00\u4E2A token \u540E\u5B58\u5165\u5230\u6570\u7EC4\u4E2D</span>
	<span class="token keyword">function</span> <span class="token function">pushToken</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
		currentToken <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token parameter">chars</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> stateMachine <span class="token operator">=</span> init
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> char <span class="token keyword">of</span> chars<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			stateMachine <span class="token operator">=</span> <span class="token function">stateMachine</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">return</span> tokens
	<span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br></div></div><p>\u5C06\u62FF\u5230\u7684\u5206\u8BCD\u6570\u7EC4\u62FC\u6210 json\uFF0C\u4E3B\u8981\u7528\u5230\u4E86\u6808\u6765\u7F13\u5B58\u6BCF\u6B21\u6B63\u5728\u5904\u7406\u7684\u5BF9\u8C61\uFF0C\u4F46\u662F\u5904\u7406\u5185\u90E8\u5D4C\u5957\u7684\u5F15\u7528\u7C7B\u578B\u503C\u65F6\uFF0C\u9700\u8981\u63D0\u524D\u8BB0\u4F4F\u7236\u5BF9\u8C61\u7684 key\uFF08\u5B50\u5BF9\u8C61\u5904\u7406\u5B8C\u4E86\u518D\u8D4B\u503C\u7ED9\u7236\u5BF9\u8C61\u7684key\uFF09\uFF0C\u8FD9\u91CC\u6211\u662F\u76F4\u63A5\u6BCF\u6B21\u8BFB\u53D6\u5230 key \u65F6\uFF0C\u90FD\u5728\u5F53\u524D\u5BF9\u8C61\u4E0A\u5B58\u4E00\u4E0B key \u7684\u503C\uFF0C\u6CE8\u610F\u9700\u8981\u7528 symbol \u7C7B\u578B\u6765\u6DFB\u52A0\u5C5E\u6027\uFF0C\u5426\u5219\u6709\u53EF\u80FD\u8986\u76D6\u4E86\u5BF9\u8C61\u91CC\u540C\u540D\u7684\u5C5E\u6027\u3002\u7B49\u8BBE\u7F6E\u5B8C\u5BF9\u5E94 key \u7684\u5C5E\u6027\u503C\u540E\u518D\u628A\u81EA\u5DF1\u6DFB\u52A0\u7684\u8FD9\u4E2A symbol \u5C5E\u6027\u5220\u6389\u3002\u8FD9\u91CC\u4E5F\u53EF\u4EE5\u901A\u8FC7\u4E00\u4E2A\u6808\u6765\u5B58\u6BCF\u6B21\u8BFB\u5230\u7684 key\uFF0C\u6BCF\u6B21\u8981\u8BBE\u7F6E\u503C\u65F6\u51FA\u6808\u5C31\u662F\u5F53\u524D\u8981\u64CD\u4F5C\u7684 key\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u89E3\u6790</span>
<span class="token keyword">function</span> <span class="token function">jsonParse</span><span class="token punctuation">(</span><span class="token parameter">tokenList</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u7528\u6808\u6765\u5B58\u6BCF\u6B21\u9047\u5230\u7684\u65B0\u5BF9\u8C61</span>
  <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token comment">// \u5F53\u524D\u6B63\u5728\u64CD\u4F5C\u7684\u5BF9\u8C61</span>
  <span class="token keyword">let</span> currentObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token comment">// \u7528 symbol \u7C7B\u578B\u6765\u505A\u5C5E\u6027\u540D\uFF0C\u9632\u6B62\u8986\u76D6\u4E86\u5BF9\u8C61\u91CC\u540C\u540D\u7684\u5C5E\u6027</span>
  <span class="token keyword">const</span> lastKey <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;lastKey&#39;</span><span class="token punctuation">)</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tokenList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> item <span class="token operator">=</span> tokenList<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;objectStart&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      currentObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentObj<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;objectEnd&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> current <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> parent <span class="token operator">=</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> key <span class="token operator">=</span> parent<span class="token punctuation">[</span>lastKey<span class="token punctuation">]</span>
          parent<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> current

          <span class="token comment">// \u8BBE\u7F6E\u4E86\u5C5E\u6027\u503C\u540E\uFF0C\u5220\u6389\u5B58\u7684\u952E\u540D</span>
          <span class="token keyword">delete</span> parent<span class="token punctuation">[</span>lastKey<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;key&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      currentObj<span class="token punctuation">[</span>lastKey<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">.</span>value
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;valueNumber&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;valueBoolean&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;valueNull&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;valueArray&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> key <span class="token operator">=</span> currentObj<span class="token punctuation">[</span>lastKey<span class="token punctuation">]</span>
      <span class="token keyword">let</span> value <span class="token operator">=</span> item<span class="token punctuation">.</span>value
      <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;valueNumber&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        value <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;valueBoolean&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        value <span class="token operator">=</span> value <span class="token operator">===</span> <span class="token string">&#39;true&#39;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;valueNull&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        value <span class="token operator">=</span> <span class="token keyword">null</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;valueArray&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// value = value.split(&#39;,&#39;)</span>
        value <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&#39;[&#39;</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">&#39;]&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// \u975E\u7A7A\u5B57\u7B26\u4E32\u4E24\u5934\u7684\u5F15\u53F7\u7ED9\u53BB\u6389</span>
      <span class="token keyword">const</span> stringReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^&quot;([\\s\\S]+)&quot;$</span><span class="token regex-delimiter">/</span></span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>stringReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>stringReg<span class="token punctuation">,</span> <span class="token string">&#39;$1&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      currentObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value

      <span class="token comment">// \u8BBE\u7F6E\u4E86\u5C5E\u6027\u503C\u540E\uFF0C\u5220\u6389\u5B58\u7684\u952E\u540D</span>
      <span class="token keyword">delete</span> currentObj<span class="token punctuation">[</span>lastKey<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> stack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br></div></div><p>\u6D4B\u8BD5\u6548\u679C</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> boy <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;\u5468\u5C0F\u9ED1&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token literal-property property">marriage</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">hobby</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;\u5403\u70DF&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u559D\u9152&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u70EB\u5934&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">son</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">nickname</span><span class="token operator">:</span> <span class="token string">&#39;\u5C0F\u9992\u5934&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">toy</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token literal-property property">school</span><span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>boy<span class="token punctuation">)</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">jsonTokenizer</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\u5206\u8BCD\u7ED3\u679C -------------------&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">jsonParse</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\u89E3\u6790\u7ED3\u679C -------------------&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>

<span class="token comment">// // \u5206\u8BCD\u7ED3\u679C -------------------</span>
<span class="token comment">// [</span>
<span class="token comment">//   { type: &#39;objectStart&#39;, value: &#39;{&#39; },</span>
<span class="token comment">//   { type: &#39;key&#39;, value: &#39;name&#39; },</span>
<span class="token comment">//   { type: &#39;colon&#39;, value: &#39;:&#39; },</span>
<span class="token comment">//   { type: &#39;value&#39;, value: &#39;&quot;\u5468\u5C0F\u9ED1&quot;&#39; },</span>
<span class="token comment">//   { type: &#39;comma&#39;, value: &#39;,&#39; },</span>
<span class="token comment">//   { type: &#39;key&#39;, value: &#39;age&#39; },</span>
<span class="token comment">//   { type: &#39;colon&#39;, value: &#39;:&#39; },</span>
<span class="token comment">//   { type: &#39;valueNumber&#39;, value: &#39;18&#39; },</span>
<span class="token comment">//   { type: &#39;comma&#39;, value: &#39;,&#39; },</span>
<span class="token comment">//   { type: &#39;key&#39;, value: &#39;marriage&#39; },</span>
<span class="token comment">//   { type: &#39;colon&#39;, value: &#39;:&#39; },</span>
<span class="token comment">//   { type: &#39;valueBoolean&#39;, value: &#39;true&#39; },</span>
<span class="token comment">//   { type: &#39;comma&#39;, value: &#39;,&#39; },</span>
<span class="token comment">//   { type: &#39;key&#39;, value: &#39;hobby&#39; },</span>
<span class="token comment">//   { type: &#39;colon&#39;, value: &#39;:&#39; },</span>
<span class="token comment">//   { type: &#39;arrayStart&#39;, value: &#39;[&#39; },</span>
<span class="token comment">//   { type: &#39;valueArray&#39;, value: &#39;&quot;\u5403\u70DF&quot;,&quot;\u559D\u9152&quot;,&quot;\u70EB\u5934&quot;&#39; },</span>
<span class="token comment">//   { type: &#39;arrayEnd&#39;, value: &#39;]&#39; },</span>
<span class="token comment">//   { type: &#39;comma&#39;, value: &#39;,&#39; },</span>
<span class="token comment">//   { type: &#39;key&#39;, value: &#39;son&#39; },</span>
<span class="token comment">//   { type: &#39;colon&#39;, value: &#39;:&#39; },</span>
<span class="token comment">//   { type: &#39;objectStart&#39;, value: &#39;{&#39; },</span>
<span class="token comment">//   { type: &#39;key&#39;, value: &#39;nickname&#39; },</span>
<span class="token comment">//   { type: &#39;colon&#39;, value: &#39;:&#39; },</span>
<span class="token comment">//   { type: &#39;value&#39;, value: &#39;&quot;\u5C0F\u9992\u5934&quot;&#39; },</span>
<span class="token comment">//   { type: &#39;comma&#39;, value: &#39;,&#39; },</span>
<span class="token comment">//   { type: &#39;key&#39;, value: &#39;toy&#39; },</span>
<span class="token comment">//   { type: &#39;colon&#39;, value: &#39;:&#39; },</span>
<span class="token comment">//   { type: &#39;valueNull&#39;, value: &#39;null&#39; },</span>
<span class="token comment">//   { type: &#39;objectEnd&#39;, value: &#39;}&#39; },</span>
<span class="token comment">//   { type: &#39;objectEnd&#39;, value: &#39;}&#39; }</span>
<span class="token comment">// ]</span>

<span class="token comment">// // \u89E3\u6790\u7ED3\u679C -------------------</span>
<span class="token comment">// {</span>
<span class="token comment">//   name: &#39;\u5468\u5C0F\u9ED1&#39;,</span>
<span class="token comment">//   age: 18,</span>
<span class="token comment">//   marriage: true,</span>
<span class="token comment">//   hobby: [ &#39;\u5403\u70DF&#39;, &#39;\u559D\u9152&#39;, &#39;\u70EB\u5934&#39; ],</span>
<span class="token comment">//   son: { nickname: &#39;\u5C0F\u9992\u5934&#39;, toy: null }</span>
<span class="token comment">// }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br></div></div><h3 id="json-stringify" tabindex="-1"><a class="header-anchor" href="#json-stringify" aria-hidden="true">#</a> JSON.stringify</h3><p>\u4E0B\u9762\u662F\u4E00\u4E2A\u7B80\u7248\u7684 JSON.stringify\uFF0C\u53EA\u662F\u4E3A\u4E86\u5C55\u793A\u6838\u5FC3\u539F\u7406\uFF0C\u5F88\u591A\u5F02\u5E38\u60C5\u51B5\u5E76\u672A\u5904\u7406\uFF0C\u4E3B\u8981\u5C31\u662F\u5229\u7528\u9012\u5F52\u65B9\u6CD5\u53BB\u5904\u7406\u503C\u91CC\u7684\u5BF9\u8C61\u548C\u6570\u7EC4\uFF0C\u5176\u4ED6\u7684\u57FA\u672C\u6570\u636E\u7C7B\u578B\u53EA\u7528\u76F4\u63A5\u8F6C\u6210\u5BF9\u5E94\u7684 toString \u5F62\u5F0F\u62FC\u63A5\u8FDB\u53BB\u5C31\u884C\u4E86\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">jsonStringify</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">fmtValue</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">&#39;null&#39;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&#39;boolean&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token string">&#39;[&#39;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          res <span class="token operator">+=</span> <span class="token punctuation">(</span>i <span class="token operator">?</span> <span class="token string">&#39;, &#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fmtValue</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res <span class="token operator">+</span> <span class="token string">&#39;]&#39;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;[object Object]&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> txt <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>k<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;:</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span> <span class="token function">fmtValue</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>
            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token string">&#39;{&#39;</span> <span class="token operator">+</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;}&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token parameter">object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span>
    keys<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> txt <span class="token operator">=</span>  <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;:</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span> <span class="token function">fmtValue</span><span class="token punctuation">(</span>object<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
      list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token string">&#39;{&#39;</span> <span class="token operator">+</span> list<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;}&#39;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token function">main</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div>`,18);function t(e,o){return p}var r=s(a,[["render",t]]);export{r as default};
